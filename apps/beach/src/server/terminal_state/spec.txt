The terminal state directory contains models for state used to represent what a user would see on their terminal screen at different points in time.

There are a few key constructs:

* A "Cell" represents a single cell of the terminal, which has a unicode value, as well as a background color and any other properties that can be "persisted" as the unicode value of the cell changes.
* A "Line Counter" is designed to keep track of which line number in the full terminal line history we are on currently. For instance, if we write a million "echo 'hello world'" statements with a return after each one (and there was nothing in the terminal aside from the bash prompt before we started writing), then we would have 2,000,001 rows including the echo results and the current line which would be a bash prompt with no input. Line counts can become very large so this should be a bigint. The line count should be stored as the "unwrapped" line count so it is consistent across dimensions.
* A "Char Counter" is designed to keep track of which unicode char number in a sequence (including non-visible chars like `\r`) we're currently on. It should be bigint.
* A "Grid" is a collection of cells with a fixed set of dimensions (ie the dimensions of the PTY at a time that the user would have seen the Grid).
    * A Grid also has a start and end line count - that is, what the line count would have been at the top row of the grid when a user was viewing it (per the "Line Counter") and what the line count would've been at the very bottom row of the grid. 
    * A Grid also has a 
* A "Grid Delta" represents a change to a Grid, which can be either a change in dimension or a change in Cell content (including background color and other "persisted" attributes of a Cell). Grid deltas should be tiny and super efficient to store. 
* A "Grid History" represents an ordered sequence of both Grids and Grid Deltas. A Grid History must start with a full Grid (the initial state) then can have zero or more Grid Deltas applied to it. If another Grid appears in the sequence then it serves as a "snapshot" that is helpful in that instead of going back to the initial state Grid and re-applying all deltas, you could just start at that Grid "snapshot" to get a more recent state then apply deltas from there.
    * A Grid History should be fast to lookup in one of a few ways:
        * by line number - ie we want to re-derive what the terminal grid looked like at a certin point in the line history
        * by time (both absolute and relative) - ie we want to lookup what the terminal grid looked like X minutes into a session OR at an exact timestamp
* A "Grid View" is a derived Grid that is reconstructed from a Grid History. This part is super duper tricky, so think carefully here!
    * We want to implement logic (GridView.derive() perhaps?) that will accept either:
        * Only optional grid dimensions (which must be at least as wide as the current terminal server, and if no grid dimensions are given should default to the beach server pty's dimensions), which would give the "realtime" view which is what a user would see in the beach server if they weren't scrolling (ie at the end of the terminal where new chars are being appended)
        * Optional grid dimensions and a start line, which would return the grid view from the start line number which is the top of the grid.
        * Optional grid dimensions and either a relative or absolute time. Would return what the "realtime" terminal grid/screen would have been at the given time.
    * Note that the grid view logic will need to elegantly handle re-wrapping to achieve the width dimension specified 