services:
  postgres:
    image: postgres:15-alpine
    container_name: beach-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: beach_manager
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - beach-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 3s
      retries: 30
  redis:
    image: redis:7-alpine
    container_name: beach-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - beach-network
  beach-manager:
    image: rustlang/rust:nightly
    container_name: beach-manager
    working_dir: /app
    command: ["cargo", "run", "-p", "beach-manager"]
    environment:
      DATABASE_URL: postgres://postgres:postgres@beach-postgres:5432/beach_manager
      REDIS_URL: redis://beach-redis:6379
      AUTH_BYPASS: "1"
      BEACH_ROAD_URL: http://beach-road:4132
      PUBLIC_MANAGER_URL: http://127.0.0.1:8080
      BEACH_SESSION_SERVER: http://beach-road:4132
      RUST_LOG: info
    volumes:
      - .:/app
      - cargo-manager-target:/app/target
      - cargo-manager-registry:/usr/local/cargo/registry
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "8080:8080"
    networks:
      - beach-network
  beach-road:
    image: rustlang/rust:nightly
    container_name: beach-road
    working_dir: /app
    command: ["cargo", "run", "-p", "beach-road"]
    environment:
      REDIS_URL: redis://beach-redis:6379
      BEACH_SESSION_SERVER: http://beach-road:4132
      BEACH_PUBLIC_SESSION_SERVER: http://127.0.0.1:4132
      BEACH_ROAD_PORT: 4132
      RUST_LOG: info
    volumes:
      - .:/app
      - cargo-road-target:/app/target
      - cargo-road-registry:/usr/local/cargo/registry
    depends_on:
      redis:
        condition: service_started
    ports:
      - "4132:4132"
    networks:
      - beach-network
  beach-gate:
    image: node:20
    container_name: beach-gate
    working_dir: /app/apps/beach-gate
    command: sh -c "npm ci || npm install; npm run dev"
    environment:
      CLERK_MOCK: "1"
      BEACH_GATE_PORT: 4133
      BEACH_GATE_TOKEN_ISSUER: beach-gate
      BEACH_GATE_SERVICE_AUDIENCE: beach-services
    volumes:
      - .:/app
    ports:
      - "4133:4133"
    networks:
      - beach-network
  private-beach:
    image: node:20
    container_name: private-beach
    working_dir: /app/apps/private-beach
    command: sh -c "npm ci || npm install; npm run dev -- -p 3001"
    environment:
      NEXT_PUBLIC_MANAGER_URL: http://localhost:8080
      NEXT_PUBLIC_ROAD_URL: http://localhost:4132
      PRIVATE_BEACH_DATABASE_URL: postgres://postgres:postgres@beach-postgres:5432/private_beach_surfer
      TAILWIND_MODE: watch
      CHOKIDAR_USEPOLLING: "true"
    volumes:
      - .:/app
    depends_on:
      beach-manager:
        condition: service_started
      db-seed:
        condition: service_completed_successfully
      private-beach-migrate:
        condition: service_completed_successfully
    ports:
      - "3001:3001"
    networks:
      - beach-network
  private-beach-migrate:
    image: postgres:15-alpine
    container_name: private-beach-migrate
    environment:
      PGPASSWORD: postgres
    volumes:
      - ./apps/private-beach/drizzle:/drizzle:ro
    depends_on:
      db-migrate:
        condition: service_completed_successfully
    entrypoint: ["sh", "-c", "set -e; \
      until pg_isready -h beach-postgres -U postgres >/dev/null 2>&1; do echo 'waiting for postgres'; sleep 1; done; echo 'postgres is ready for surfer'; \
      for f in /drizzle/*.sql; do \
        echo 'applying surfer migration' $$f; \
        psql -v ON_ERROR_STOP=1 -h beach-postgres -U postgres -d private_beach_surfer -f $$f; \
      done; \
      echo 'surfer migrations applied' "]
    networks:
      - beach-network
  db-migrate:
    image: postgres:15-alpine
    container_name: beach-db-migrate
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: postgres
    volumes:
      - ./apps/beach-manager/migrations:/migrations:ro
    entrypoint: ["sh", "-c", "set -e; \
      until pg_isready -h beach-postgres -U postgres >/dev/null 2>&1; do echo 'waiting for postgres'; sleep 1; done; echo 'postgres is ready'; \
      psql -v ON_ERROR_STOP=1 -h beach-postgres -U postgres -d beach_manager -c 'CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";'; \
      psql -v ON_ERROR_STOP=1 -h beach-postgres -U postgres -d beach_manager -c 'CREATE EXTENSION IF NOT EXISTS citext;'; \
      if ! psql -tAc \"SELECT 1 FROM pg_database WHERE datname = 'private_beach_surfer'\" -h beach-postgres -U postgres -d postgres | grep -q 1; then \
        echo 'creating database private_beach_surfer'; \
        psql -v ON_ERROR_STOP=1 -h beach-postgres -U postgres -d postgres -c 'CREATE DATABASE private_beach_surfer'; \
      fi; \
      if psql -tAc \"SELECT to_regclass('session') IS NOT NULL\" -h beach-postgres -U postgres -d beach_manager | grep -q 't'; then \
        echo 'migrations already present; skipping raw apply'; exit 0; \
      fi; \
      for f in /migrations/*.sql; do echo 'applying migration' $$f; psql -v ON_ERROR_STOP=1 -h beach-postgres -U postgres -d beach_manager -f $$f; done; \
      echo 'migrations applied' "]
    networks:
      - beach-network
  db-seed:
    image: postgres:15-alpine
    container_name: beach-db-seed
    depends_on:
      db-migrate:
        condition: service_completed_successfully
    environment:
      PGPASSWORD: postgres
    volumes:
      - ./config/dev-seed.sql:/seed/dev-seed.sql:ro
    entrypoint: ["sh", "-c", "set -e; psql -v ON_ERROR_STOP=1 -h beach-postgres -U postgres -d beach_manager -f /seed/dev-seed.sql && echo 'seeded'"]
    networks:
      - beach-network
  coturn:
    image: coturn/coturn:4.6-alpine
    container_name: beach-coturn
    command:
      - turnserver
      - -c
      - /etc/coturn/turnserver.conf
      - --log-file
      - stdout
    ports:
      - "3478:3478"
      - "3478:3478/udp"
      - "5349:5349"
      - "5349:5349/udp"
    volumes:
      - ./config/coturn/dev-turnserver.conf:/etc/coturn/turnserver.conf:ro
    networks:
      - beach-network
  beach-lifeguard:
    image: rustlang/rust:nightly
    container_name: beach-lifeguard
    profiles: ["lifeguard"]
    working_dir: /app
    command: ["cargo", "run", "-p", "beach-lifeguard-server"]
    environment:
      BEACH_LIFEGUARD_REDIS_URL: redis://beach-redis:6379
      BEACH_LIFEGUARD_DISABLE_OIDC: "1"
      RUST_LOG: info
    volumes:
      - .:/app
      - cargo-lifeguard-target:/app/target
      - cargo-lifeguard-registry:/usr/local/cargo/registry
    depends_on:
      - redis
    networks:
      - beach-network

volumes:
  postgres-data:
  redis-data:
  cargo-manager-target:
  cargo-manager-registry:
  cargo-lifeguard-target:
  cargo-lifeguard-registry:
  cargo-road-target:
  cargo-road-registry:

networks:
  beach-network:
    driver: bridge
